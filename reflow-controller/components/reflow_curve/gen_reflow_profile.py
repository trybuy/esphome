#!/usr/bin/env python3
"""
PlatformIO pre-compilation script for generating reflow profile header file.
This script runs before C++ compilation to generate reflow_profile_data.h from CSV file.
"""

import os
import sys
import csv

def read_reflow_profile_csv(csv_path):
    """Read reflow profile CSV and return data points."""
    profile_data = []
    
    try:
        with open(csv_path, 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            for row in reader:
                time_seconds = int(float(row['time_seconds']))
                temperature_celsius = float(row['temperature_celsius'])
                profile_data.append((time_seconds, temperature_celsius))
        
        return profile_data
    except FileNotFoundError:
        print(f"Error: Reflow profile CSV not found: {csv_path}")
        sys.exit(1)
    except Exception as e:
        print(f"Error reading reflow profile CSV {csv_path}: {e}")
        sys.exit(1)

def generate_reflow_profile_header(profile_data, build_dir):
    """Generate reflow_profile_data.h file containing profile as C++ array."""
    
    # Generate C++ array data
    array_data = ""
    for i, (time_sec, temp_c) in enumerate(profile_data):
        if i > 0:
            array_data += ",\n    "
        array_data += f"{{{time_sec}, {temp_c}f}}"
    
    header_content = f'''#pragma once

// Auto-generated reflow profile data
// Generated by gen_reflow_profile.py - Do not edit this file directly
// Edit the reflow_profile.csv file and recompile

namespace esphome {{
namespace reflow_curve {{

struct ReflowProfilePoint {{
    uint32_t time_seconds;
    float temperature_celsius;
}};

const int REFLOW_PROFILE_SIZE = {len(profile_data)};

const ReflowProfilePoint REFLOW_PROFILE_DATA[REFLOW_PROFILE_SIZE] = {{
    {array_data}
}};

}}  // namespace reflow_curve
}}  // namespace esphome
'''
    
    return header_content

def main():
    """Main function called by PlatformIO before compilation."""
    # Get the current working directory (should be the build directory)
    build_dir = os.getcwd()
    print(f"PlatformIO reflow profile script running in: {build_dir}")
    
    # Find the component source directory
    # PlatformIO runs from the build directory: project/.esphome/build/project-name
    # We need to go up to the project root and then to the CSV file
    build_parent = os.path.dirname(build_dir)    # .esphome/build
    esphome_dir = os.path.dirname(build_parent)  # .esphome
    project_dir = os.path.dirname(esphome_dir)   # project root
    csv_file_path = os.path.join(project_dir, "reflow_profile.csv")
    
    if not os.path.exists(csv_file_path):
        print(f"Error: Reflow profile CSV not found: {csv_file_path}")
        sys.exit(1)
    
    # Read the CSV data
    profile_data = read_reflow_profile_csv(csv_file_path)
    
    # Generate the header content
    header_content = generate_reflow_profile_header(profile_data, build_dir)
    
    # Write to the build directory where C++ compilation will find it
    build_component_dir = os.path.join(build_dir, "src", "esphome", "components", "reflow_curve")
    os.makedirs(build_component_dir, exist_ok=True)
    header_file_path = os.path.join(build_component_dir, "reflow_profile_data.h")
    
    with open(header_file_path, 'w', encoding='utf-8') as f:
        f.write(header_content)
    
    print(f"Successfully generated reflow profile data: {header_file_path}")
    print(f"Profile contains {len(profile_data)} data points")

main()
