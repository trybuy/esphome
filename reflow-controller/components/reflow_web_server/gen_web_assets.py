#!/usr/bin/env python3
"""
PlatformIO pre-compilation script for generating web assets header file.
This script runs before C++ compilation to generate web_assets.h from source files.
"""

import os
import sys
import gzip

def read_web_asset_gzipped(filename, component_dir):
    """Read a web asset file and return its contents as a gzipped C++ byte array."""
    file_path = os.path.join(component_dir, filename)
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Compress the content using gzip
        compressed_content = gzip.compress(content.encode('utf-8'))
        
        # Convert to C++ byte array format
        byte_array = ', '.join(f'0x{byte:02x}' for byte in compressed_content)
        
        return byte_array, len(compressed_content)
    except FileNotFoundError:
        print(f"Error: Web asset file not found: {file_path}")
        sys.exit(1)
    except Exception as e:
        print(f"Error reading web asset file {file_path}: {e}")
        sys.exit(1)

def generate_web_assets_header(component_dir, build_dir):
    """Generate web_assets.h file containing web assets as C++ constants."""
    print(f"Generating web assets from: {component_dir}")
    print(f"Writing to build directory: {build_dir}")
    
    html_content, html_size = read_web_asset_gzipped("index.html", component_dir)
    css_content, css_size = read_web_asset_gzipped("style.css", component_dir)
    js_content, js_size = read_web_asset_gzipped("script.js", component_dir)
    
    header_content = f'''#pragma once

// Auto-generated web assets for Reflow Web Server
// Generated by gen_web_assets.py - Do not edit this file directly
// Edit the source files (index.html, style.css, script.js) and recompile

namespace esphome {{
namespace reflow_web_server {{

const uint8_t INDEX_HTML_GZIP[] = {{{html_content}}};
const size_t INDEX_HTML_GZIP_SIZE = {html_size};

const uint8_t STYLE_CSS_GZIP[] = {{{css_content}}};
const size_t STYLE_CSS_GZIP_SIZE = {css_size};

const uint8_t SCRIPT_JS_GZIP[] = {{{js_content}}};
const size_t SCRIPT_JS_GZIP_SIZE = {js_size};

}}  // namespace reflow_web_server
}}  // namespace esphome
'''
    
    return header_content

def main():
    """Main function called by PlatformIO before compilation."""
    # Get the current working directory (should be the build directory)
    build_dir = os.getcwd()
    print(f"PlatformIO pre-script running in: {build_dir}")
    
    # Find the component source directory
    # PlatformIO runs from the build directory: project/.esphome/build/project-name
    # We need to go up to the project root and then to components
    build_parent = os.path.dirname(build_dir)    # .esphome/build
    esphome_dir = os.path.dirname(build_parent)  # .esphome
    project_dir = os.path.dirname(esphome_dir)   # project root
    component_source_dir = os.path.join(project_dir, "components", "reflow_web_server")
    
    if not os.path.exists(component_source_dir):
        print(f"Error: Component source directory not found: {component_source_dir}")
        sys.exit(1)
    
    # Generate the header content
    header_content = generate_web_assets_header(component_source_dir, build_dir)
    
    # Write to the build directory where C++ compilation will find it
    build_component_dir = os.path.join(build_dir, "src")
    os.makedirs(build_component_dir, exist_ok=True)
    header_file_path = os.path.join(build_component_dir, "web_assets.h")
    
    with open(header_file_path, 'w', encoding='utf-8') as f:
        f.write(header_content)
    
    print(f"Successfully generated: {header_file_path}")


main()
